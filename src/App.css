html {
    overflow: hidden;
    touch-action: none;
}
body {
    margin: 0;
    background-color: rgb(1, 1, 20);
    user-select: none;
}


#title {
    font-size: 40px;
    line-height: 40px;
}
#author {
    font-size: 22px;
    line-height: 0px;
    font-style: italic;
}
#lyrics {
    font-family: 'Cormorant Garamond', serif;
    text-align: center;
    font-size: 28px;
    padding: 2% 5% 35% 5%;
    width: 90%;
    height: 78%;
    overflow-y: scroll;
}


.canvas-dev {
    text-align: center;
    height: 100vh;
}
.canvas-parent {
    text-align: center;
    transition: opacity .3s ease .4s; /* Wait .4s because all the icons have a transition time of .4s  */
}
.canvas {
    position: absolute;
    height: 100vh;
    transform: translateX(-50%);
    border-left: solid 800px rgb(1, 1, 20); /* Only way to hide clouds from exiting out from behind main-image was to give main-image a border, since it's dynamic positioning/sizing made it impossible to flank it with similarly dynamic divs that would fit flush against its left and right sides */
    border-right: solid 800px rgb(1, 1, 20);
}


.singleTrackPage {
    height: 100vh;
    background-color: rgb(255,255,255);
    animation: fadeInNewPage 1s ease;
}


.clouds {
    width: 100%;
    height: 100vh;
    position: absolute;
}


.ripple {
    position: absolute;
    border-radius: 50%;
    animation: rippleEffect .41s cubic-bezier(0, 0, 0, 1); /* ripple active time is 400ms and time of animation needs to be just a bit longer than that otherwise there'll be an animation glitch */
}


.hand-controller { /* This class simply flips the camera horizontally in HandController, since its default isn't mirrored. Ideally I would have passed    videoConstraints={facingMode: "user"}    to the Webcam per the docs at    https://www.npmjs.com/package/react-webcam    but that wasn't working for unknown reasons. My immediate response was to use an inline style on the topmost parent div in    HandController.js    , style={{transform: 'rotateY(180deg)'}}    , which worked to properly flip the canvas in Chrome and Mozilla but which changed the element stacking context in Safari such that if    this.state.cloudsOn    was true in    Home.js    the hand would appear behind the clouds and all proceeding elements unless    this.state.cloudsOn    was turned off in which case it would suddenly appear in its proper place in the stacking context as dictated by    Home.js    . This class, which replaces the inline style,    style={{transform: 'rotateY(180deg)'}}    , solves the problem and is thanks to the answer by    robertc    on    2010, 06-28th    in    https://stackoverflow.com/questions/3129099/how-to-flip-images-horizontally-with-html5 */
    -moz-transform: scale(-1, 1);
    -webkit-transform: scale(-1, 1);
    -o-transform: scale(-1, 1);
    transform: scale(-1, 1);
    filter: FlipH;
}


.next-and-previous-icons {
    color: rgb(60,20,1);
}
.play-icon {
    color: rgb(1,1,30);
}
.play-active {
    animation: play-icon-pulse 1s infinite; /* add animated property here that lightens color in an infinite pulse*/
}
.pause-icon {
    color: rgb(1,30,1);
}
.pause-active {
    animation: pause-icon-pulse .5s infinite; /* add animated property here that lightens color in an infinite pulse*/
}
.stop-icon {
    color: rgb(40,1,10);
}
.audio-icon {
    opacity: .75;
    cursor: pointer;
    transition: all .4s ease;
}
.audio-icon:hover {
    color: rgb(0,170,170);
    opacity: .5;
    transform: scale(1.2);
    transition: all .2s ease;
}
.slider {
  appearance: none;
  -webkit-appearance: none;
  width: 100%;
  height: 1px;
  background: rgba(32,32,1,.5);
  outline: none;
  -webkit-transition: .2s;
  transition: opacity .2s;
}
.slider::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  width: 34px;
  height: 17px;
  border-radius: 25%;
  opacity: .75;
  background: rgb(32,32,1);
  cursor: pointer;
  transition: all .4s ease;
}
.slider::-moz-range-thumb {
  width: 34px;
  height: 17px;
  border-radius: 25%;
  opacity: .75;
  background: rgb(32,32,1);
  cursor: pointer;
  transition: all .4s ease;
}
.slider::-webkit-slider-thumb:hover {
    opacity: .5;
    background: rgb(0,170,170);
    transform: scale(1.2);
    transition: all .2s ease;
}
.slider::-moz-range-thumb:hover {
    opacity: .5;
    background: rgb(0,170,170);
    transform: scale(1.2);
    transition: all .2s ease;
}


.title {
    font-family: Nothing You Could Do, cursive;
    color: rgba(255,255,255,.65);
    cursor: pointer;
    transition: all .4s ease;
}
.title:hover {
    color: rgba(0,170,170,.95);
    transform: scale(1.15);
    transition: all .2s ease;
}


.form-container {
    visibility: hidden;
    position: absolute;
    width: 200px;
    top: 55%;
    transform: translateY(-50%) translateX(0%) scaleX(.7);
    transform-origin: right;
    opacity: 0;
    transition: all .3s ease;
}
.form-container-revealed {
    visibility: visible;
    transform: translateY(-50%) translateX(-10%) scaleX(1);
    opacity: 1;
    transition: all .3s ease;
}
.form-send-narrow-animation {
    transform: translateY(-120%) translateX(-200%) skew(-.06turn, -35deg) scale(.1);
    opacity: 0;
    transition: all 1.5s cubic-bezier(.4,0,1,.9) 1s;
}
.form-send-wide-animation {
    transform: translateY(-120%) translateX(-375%) skew(-.06turn, -35deg) scale(.1);
    opacity: 0;
    transition: all 1.5s cubic-bezier(.4,0,1,.9) 1s;
}

.form-fields {
    font-size: 19px;
    font-family: 'Cormorant Garamond', serif;
    margin: 1px;
    padding: 5px 10px;
    border: none;
    border-radius: 5px;
    background-color: rgba(255,255,255,.85);
    transition: all .3s ease;
}
.form-fields::placeholder {
    color: rgba(0,0,0,.3);
}
.form-fields:hover {
    background-color: rgba(228,228,255,.95);
}
.form-fields.message::placeholder {
    font-style: italic;
}

.button {
    font-size: 16px;
    background-color: rgba(0,170,170,.95);
}
.form-fields.button:hover {
    background-color: rgba(245,245,215,.85);
}
.button-text {
    font-family: Nothing You Could Do, cursive;
    color: rgba(255,255,255,1);
    transition: all .3s ease;
}
.form-fields.button:hover .button-text {
    color: rgba(1,1,40,1);
    font-weight: 800;
}


.info-sheet-container {
    visibility: hidden;
    position: absolute;
    width: 230px;
    height: 300px;
    top: 50%;
    overflow: auto;
    border-top-left-radius: 10px;
    border-bottom-left-radius: 10px;
    padding: 15px 20px 10px 20px;
    font-family: 'Cormorant Garamond', serif;
    font-size: 19px;
    color: rgb(1,1,40);
    background-color: rgba(255,255,255,.85);
    transform: translateY(-50%) scaleX(.7);
    transform-origin: right;
    opacity: 0;
    transition: all .3s ease;
}
.info-sheet-container-revealed {
    visibility: visible;
    transform: translateY(-50%) scaleX(1);
    opacity: 1;
    transition: all .3s ease;
}
.info-sheet-heading {
    font-size: 34px;
    font-weight: 700;
}


.social-menu-container-open {
    visibility: visible;
    position: absolute;
    display: flex;
    flex-direction: row;
    width: 60px;
    height: 230px;
    top: 55%;
    transform: translateY(-50%) translateX(0%) scaleX(1);
    transition: all .5s ease;
}
.social-menu-container-open-wide {
    width: 120px;
    transition: all .5s ease;
}
.social-icons-column {
    display: flex;
    flex-direction: column;
    justify-content: center;
    font-size: 0px;
    background-color: rgba(255,255,255,.65);
    transition: all .5s ease;
}
.social-icons-column-open {
    flex: 1;
    font-size: 32px;
    transition: all .5s ease;
}
.social-icons-column-open-left-gradient {
    background-image: linear-gradient(to right, rgba(255,255,215,.5) , transparent);
    transition: all .5s ease;
}

/* Can do transition all for mail:hover, github:hover and npm:hover, but not for mail, github and npm because it interferes with the CLOSING of socialIconsColumn, so the net effect is when unhovering, the colors (merely the alpha channel of the rgba in these cases) toggle abruptly but the transform scale toggles as normal which generally smoothens the whole experience so that it's not noticeable */
.mail {
    margin-top: -3px;
    color: rgb(40,120,0);
    cursor: pointer;
    transition: transform .4s ease;
}
.linkedin {
    margin-top: -2px;
    margin-bottom: -2px;
    color: rgb(16,116,174);
    cursor: pointer;
    transition: transform .4s ease;
}
.resume {
    color: rgb(150,100,0);
    cursor: pointer;
    transition: transform .4s ease;
}
.github {
    color: rgb(124,14,124);
    cursor: pointer;
    transition: transform .4s ease;
}
.npm {
    margin-top: -4px;
    margin-bottom: -4px;
    color: rgb(201,8,19);
    cursor: pointer;
    transition: transform .4s ease;
}
.info {
    color: rgb(145,15,0);
    cursor: pointer;
    transition: transform .4s ease;
}
.plane {
    margin-bottom: 6px;
    margin-left: 8px;
    color: rgb(160,64,255);
    cursor: pointer;
    transition: transform .4s ease;
}
.cloud {
    cursor: pointer;
    transition: transform .4s ease;
    margin: 6px -8px 12px 0;
}
.cloud-haze {
    cursor: pointer;
    transition: transform .4s ease;
    transform: translateX(6px); /* Would be ideal if this didn't need to use transform and could use margin like .cloud and .hand (in the case of this .cloud-haze icon it would be    margin: 0 -12px 4px 0;    ) but the negative margin cuts off the color and everything 12 pixels to the right ends up being rgb(255,255,255) for some reason. As a result we can't use .social-icon as a class to get the :hover pseudo-class because it's already using the transform prop so .cloud-haze:hover has to be the pseudo-class which is the same as .social-icon:hover except its transform prop includes the translateX(6px) */
}
.hand {
    cursor: pointer;
    transition: transform .4s ease;
    margin: 8px -8px 20px 0;
}



.social-icon:hover {
    /* color: rgba(0,170,170,.95); */
    transform: scale(1.2);
    transition: all .2s ease;
}
.cloud-haze:hover {
    transform: scale(1.2) translateX(6px);
    transition: all .2s ease;
}




.pull-chevron-column {
    display: flex;
    flex-direction: column;
    /* letting font-size dictate width rather than something like "flex: 1" */
    justify-content: center;
    background-color: rgba(255,255,255,.35);
    border-top-right-radius: 10px;
    border-bottom-right-radius: 10px;
    padding-left: 2px;
    cursor: pointer;
    font-size: 13px;
    padding-right: 3px;
    animation: pull-chevron-pulse-closed 1.25s infinite;
    transition: all .5s ease;
}
.pull-chevron-column:hover {
    background-color: rgba(255,0,0,.35);
    transition: all .5s ease;
}
.pull-chevron-column-open {
    animation: null;
    color: rgb(1,1,40);
    background-color: rgba(255,255,255,.65);
    animation: pull-chevron-pulse-open 1.25s infinite;
    transition: all .5s ease;
}
.pull-chevron-column-open:hover {
    background-color: rgba(200,200,255,.65);
    transition: all .5s ease;
}
.pull-chevron-column-hand-controller-specific {
    position: absolute;
    width: 16px;
    height: 32px;
}

.social-menu-labels-container {
    position: absolute;
    display: flex;
    flex-direction: row;
    width: 60px;
    height: 210px;
    top: 55%;
    transform: translateY(-50%) translateX(0%) scaleX(1);
}
.social-menu-labels-container-visible {
    opacity: 1;
    transition: all .5s ease;
}
.social-menu-labels-container-wide {
    transform: translateY(-50%) translateX(60px) scaleX(1);
    opacity: 1;
    transition: all .5s ease;
}
.social-menu-labels-container-invisible {
    opacity: 0;
    transition: opacity .25s ease;
}
.arrow {
    position: absolute;
    left: -17px;
    font-size: 28px;
}
.mail-arrow {
    top: 23px;
    transform: rotateZ(32deg);
}
.resume-arrow {
    top: 64px;
    transform: rotateZ(-16deg);
}
.github-arrow {
    top: 117px;
    transform: rotateZ(12deg);
}
.npm-arrow {
    top: 133px;
    transform: rotateZ(-23deg);
}
.info-arrow {
    top: 162px;
    transform: rotateZ(-25deg);
}
.social-text {
    position: absolute;
    border-radius: 10px;
    font-size: 16px;
    font-family: Nothing You Could Do, cursive;
}
.mail-social-text {
    left: 2px;
    top: 22px;
}
.resume-social-text {
    left: 5px;
    top: 49px;
}
.projects-social-text {
    left: 5px;
    top: 113px;
}
.info-social-text {
    left: 5px;
    top: 144px;
}
.social-menu-label-block-mail {
    animation: label-animation 1.7s infinite;
}
.social-menu-label-block-resume {
    animation: label-animation 1.8s infinite;
}
.social-menu-label-block-projects {
    animation: label-animation 1.9s infinite;
}
.social-menu-label-block-info {
    animation: label-animation 2s infinite;
}




.card-page { /* Ideally I'd have padding bring the content of    card-page    away from the edge but it's cutting off the bottom part of the content as long as    height: 100vh    */
    height: 100vh;
    background-color: rgb(255,255,255);
    animation: fadeInNewPage 1s ease;
    overflow-y: scroll;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
}
/* These thumb classes are relics of my old implementation which had the issues caused by react-photo-view's rigidity as described in annotations to utils.simulateClickOrTouch
.thumb-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 10px;
}
.thumb {
    object-fit: contain;
    width: 175px;
    height: 175px;
    margin: 10px;
    padding: 10px;
    box-shadow: 3px 4px 8px 3px rgba(0,0,0,0.2);
    transition: 0.3s;
}
.thumb:hover {
    width: 180px;
    height: 180px;
    margin: 7.5px;
    box-shadow: 6px 8px 16px 6px rgba(0,0,0,0.3);
} */

.album-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 20px;
    margin-bottom: 100px;
}
.album-name {
    width: 275px;
    text-align: center;
    margin-top: 30px;
    margin-bottom: 30px;
    font-family: Nothing You Could Do, cursive
}
.album-cover {
    object-fit: contain;
    width: 275px;
    height: 275px;
    margin: 10px;
    padding: 10px;
    box-shadow: 3px 4px 8px 3px rgba(0,0,0,0.2);
    transition: 0.3s;
}
.album-cover:hover {
    width: 280px;
    height: 280px;
    margin: 7.5px;
    box-shadow: 6px 8px 16px 6px rgba(0,0,0,0.3);
}

div.PhotoView-Slider__BannerWrap { /* Only way to override the otherwise immutable PhotoView bar was to find the className (from    react-photo-view/dist/react-photo-view.css    ) in dev tools and override here in my stylesheet, the only property of concern being the obnoxious background-color which would otherwise cover photos. Note that doing this for    PhotoView-Slider__BannerWrap    wouldn't work, it had to be    div.PhotoView-Slider__BannerWrap    */
    background-color: transparent;
}



.loading-screen {
    position: relative;
	overflow: hidden;
	display: flex;
	align-items: center;
	justify-content: center;
    opacity: .3;
}
.cube-container {
	width: 50vmin;
	height: 50vmin;
	perspective: 100vmin;
	animation: spin-all 4s ease-in-out 0s infinite;
}
.cube {
    transform-style: preserve-3d;
    background: rgb(255,0,0);
    position: absolute;
    transition: all 1s ease 0s;
}
.cube, .cube:before, .cube:after {
	animation: spin-cube 2s ease-in-out -3s infinite alternate;
}
.cube:before, .cube:after {
	position: absolute;
	content: "";
	background: rgb(255,255,0);
	transform-origin: right bottom;
	animation-name: spin-cube-before;
}
.cube:after {
	animation-name: spin-cube-after;
	background: rgb(0,128,255);
}



/* Would've had to import a separate library like "glamorous" to have been able to pass pseudo selectors as inline styles (in AudioPlayer.js, which I would have used to make the slider thumb below scale with canvasHeight). Also important to note that I wouldn't want slider thumb to scale very much as it would've be grabbable/useable. Against one of my goals for this project, to make all rendering fluidly dynamic without use of media breakpoints, in this particular case it was the optimal solution. Incidentally, when I decided I wanted to tether color and opacity of the audio interface with veilOpacity, I did import the emotion library and for some reason, though fully integrated without its syntax crashing anything, it didn't work. */
@media only screen and (max-height: 400px) {
  .slider::-webkit-slider-thumb {
    width: 28px;
    height: 14px;
  }
}
@media only screen and (max-height: 400px) {
  .slider::-moz-range-thumb {
      width: 28px;
      height: 14px;
  }
}
@keyframes fadeInNewPage {
    0% {background-color: rgb(1,1,20);}
    100% {background-color: rgb(255,255,255);}
}
@keyframes label-animation { /* There is a bug in CSS3 itself, or in React's interpretation of CSS3, wherein the rotate property has to be set to 0 in each of the keyframes of this animation in order to make the social-menu-label-block-projects class visible on mobile browsers (specifically Safari and Chrome, which were the ones I was testing) when mobile devices are held horizontally. (ONLY the social-menu-label-block-projects class for some reason, not the social-menu-label-block-resume nor social-menu-label-block-mail classes, and ONLY on mobile browsers when devices are held horizontally). Don't even ask me how I debugged this and figured it out. */
    0% {transform: translateX(0px) translateY(0px) rotate(0deg);}
    8% {transform: translateX(1px) translateY(1px) rotate(0deg);}
    16% {transform: translateX(0px) translateY(2px) rotate(0deg);}
    25% {transform: translateX(1px) translateY(1px) rotate(0deg);}
    33% {transform: translateX(0px) translateY(0px) rotate(0deg);}
    41% {transform: translateX(1px) translateY(1px) rotate(0deg);}
    50% {transform: translateX(0px) translateY(2px) rotate(0deg);}
    58% {transform: translateX(1px) translateY(1px) rotate(0deg);}
    66% {transform: translateX(0px) translateY(0px) rotate(0deg);}
    75% {transform: translateX(1px) translateY(1px) rotate(0deg);}
    83% {transform: translateX(0px) translateY(2px) rotate(0deg);}
    91% {transform: translateX(1px) translateY(1px) rotate(0deg);}
    100% {transform: translateX(0px) translateY(0px) rotate(0deg);}
}

@keyframes play-icon-pulse {
    0% {color: rgb(1,1,30)}
    5% {color: rgb(1,1,150)}
    100% {color: rgb(1,1,30)}
}
@keyframes pause-icon-pulse {
    0% {color: rgb(1,30,1)}
    25% {color: rgb(1,60,1)}
    100% {color: rgb(1,30,1)}
}


@keyframes pull-chevron-pulse-closed {
    0% {color: rgb(1,1,40)}
    5% {color: rgb(240,1,40)}
    100% {color: rgb(1,1,40)}
}
@keyframes pull-chevron-pulse-open {
    0% {color: rgb(1,1,40)}
    5% {color: rgb(1,240,240)}
    100% {color: rgb(1,1,40)}
}


@keyframes rippleEffect {
    0% {transform: scale(.1); opacity: .3}
    100% {transform: scale(1); opacity: 0}
}


@keyframes motionSizeAndFlip1 {
    0% {transform: rotateY(180deg) translateY(-0%) translateX(-50vw); opacity: 0}
    1% {transform: rotateY(180deg) translateY(-0%) translateX(-50vw); opacity: 1}
    99% {transform: rotateY(180deg) translateY(-0%) translateX(100vw); opacity: 1}
    100% {transform: rotateY(180deg) translateY(-0%) translateX(100vw); opacity: 0}
}
@keyframes motionSizeAndFlip2 {
    0% {transform: rotateY(0deg) translateY(-0%) translateX(50vw); opacity: 0}
    1% {transform: rotateY(0deg) translateY(-0%) translateX(50vw); opacity: 1}
    99% {transform: rotateY(0deg) translateY(-0%) translateX(-100vw); opacity: 1}
    100% {transform: rotateY(0deg) translateY(-0%) translateX(-100vw); opacity: 0}
}
@keyframes motionSizeAndFlip3 {
    0% {transform: rotateY(180deg) translateY(-5%) translateX(-50vw); opacity: 0}
    1% {transform: rotateY(180deg) translateY(-5%) translateX(-50vw); opacity: 1}
    99% {transform: rotateY(180deg) translateY(-5%) translateX(100vw); opacity: 1}
    100% {transform: rotateY(180deg) translateY(-5%) translateX(100vw); opacity: 0}
}
@keyframes motionSizeAndFlip4 {
    0% {transform: rotateY(0deg) translateY(-5%) translateX(50vw); opacity: 0}
    1% {transform: rotateY(0deg) translateY(-5%) translateX(50vw); opacity: 1}
    99% {transform: rotateY(0deg) translateY(-5%) translateX(-100vw); opacity: 1}
    100% {transform: rotateY(0deg) translateY(-5%) translateX(-100vw); opacity: 0}
}
@keyframes motionSizeAndFlip5 {
    0% {transform: rotateY(180deg) translateY(-10%) translateX(-50vw); opacity: 0}
    1% {transform: rotateY(180deg) translateY(-10%) translateX(-50vw); opacity: 1}
    99% {transform: rotateY(180deg) translateY(-10%) translateX(100vw); opacity: 1}
    100% {transform: rotateY(180deg) translateY(-10%) translateX(100vw); opacity: 0}
}
@keyframes motionSizeAndFlip6 {
    0% {transform: rotateY(0deg) translateY(-10%) translateX(50vw); opacity: 0}
    1% {transform: rotateY(0deg) translateY(-10%) translateX(50vw); opacity: 1}
    99% {transform: rotateY(0deg) translateY(-10%) translateX(-100vw); opacity: 1}
    100% {transform: rotateY(0deg) translateY(-10%) translateX(-100vw); opacity: 0}
}
@keyframes motionSizeAndFlip7 {
    0% {transform: rotateY(180deg) translateY(-15%) translateX(-50vw); opacity: 0}
    1% {transform: rotateY(180deg) translateY(-15%) translateX(-50vw); opacity: 1}
    99% {transform: rotateY(180deg) translateY(-15%) translateX(100vw); opacity: 1}
    100% {transform: rotateY(180deg) translateY(-15%) translateX(100vw); opacity: 0}
}
@keyframes motionSizeAndFlip8 {
    0% {transform: rotateY(0deg) translateY(-15%) translateX(50vw); opacity: 0}
    1% {transform: rotateY(0deg) translateY(-15%) translateX(50vw); opacity: 1}
    99% {transform: rotateY(0deg) translateY(-15%) translateX(-100vw); opacity: 1}
    100% {transform: rotateY(0deg) translateY(-15%) translateX(-100vw); opacity: 0}
}
@keyframes motionSizeAndFlip9 {
    0% {transform: rotateY(180deg) translateY(-20%) translateX(-50vw); opacity: 0}
    1% {transform: rotateY(180deg) translateY(-20%) translateX(-50vw); opacity: 1}
    99% {transform: rotateY(180deg) translateY(-20%) translateX(100vw); opacity: 1}
    100% {transform: rotateY(180deg) translateY(-20%) translateX(100vw); opacity: 0}
}
@keyframes motionSizeAndFlip10 {
    0% {transform: rotateY(0deg) translateY(-20%) translateX(50vw); opacity: 0}
    1% {transform: rotateY(0deg) translateY(-20%) translateX(50vw); opacity: 1}
    99% {transform: rotateY(0deg) translateY(-20%) translateX(-100vw); opacity: 1}
    100% {transform: rotateY(0deg) translateY(-20%) translateX(-100vw); opacity: 0}
}
@keyframes motionSizeAndFlip11 {
    0% {transform: rotateY(180deg) translateY(-25%) translateX(-50vw); opacity: 0}
    1% {transform: rotateY(180deg) translateY(-25%) translateX(-50vw); opacity: 1}
    99% {transform: rotateY(180deg) translateY(-25%) translateX(100vw); opacity: 1}
    100% {transform: rotateY(180deg) translateY(-25%) translateX(100vw); opacity: 0}
}
@keyframes motionSizeAndFlip12 {
    0% {transform: rotateY(0deg) translateY(-25%) translateX(50vw); opacity: 0}
    1% {transform: rotateY(0deg) translateY(-25%) translateX(50vw); opacity: 1}
    99% {transform: rotateY(0deg) translateY(-25%) translateX(-100vw); opacity: 1}
    100% {transform: rotateY(0deg) translateY(-25%) translateX(-100vw); opacity: 0}
}
@keyframes motionSizeAndFlip13 {
    0% {transform: rotateY(180deg) translateY(-30%) translateX(-50vw); opacity: 0}
    1% {transform: rotateY(180deg) translateY(-30%) translateX(-50vw); opacity: 1}
    99% {transform: rotateY(180deg) translateY(-30%) translateX(100vw); opacity: 1}
    100% {transform: rotateY(180deg) translateY(-30%) translateX(100vw); opacity: 0}
}
@keyframes motionSizeAndFlip14 {
    0% {transform: rotateY(0deg) translateY(-30%) translateX(50vw); opacity: 0}
    1% {transform: rotateY(0deg) translateY(-30%) translateX(50vw); opacity: 1}
    99% {transform: rotateY(0deg) translateY(-30%) translateX(-100vw); opacity: 1}
    100% {transform: rotateY(0deg) translateY(-30%) translateX(-100vw); opacity: 0}
}
@keyframes motionSizeAndFlip15 {
    0% {transform: rotateY(180deg) translateY(-35%) translateX(-50vw); opacity: 0}
    1% {transform: rotateY(180deg) translateY(-35%) translateX(-50vw); opacity: 1}
    99% {transform: rotateY(180deg) translateY(-35%) translateX(100vw); opacity: 1}
    100% {transform: rotateY(180deg) translateY(-35%) translateX(100vw); opacity: 0}
}
@keyframes motionSizeAndFlip16 {
    0% {transform: rotateY(0deg) translateY(-35%) translateX(50vw); opacity: 0}
    1% {transform: rotateY(0deg) translateY(-35%) translateX(50vw); opacity: 1}
    99% {transform: rotateY(0deg) translateY(-35%) translateX(-100vw); opacity: 1}
    100% {transform: rotateY(0deg) translateY(-35%) translateX(-100vw); opacity: 0}
}
@keyframes motionSizeAndFlip17 {
    0% {transform: rotateY(180deg) translateY(-40%) translateX(-50vw); opacity: 0}
    1% {transform: rotateY(180deg) translateY(-40%) translateX(-50vw); opacity: 1}
    99% {transform: rotateY(180deg) translateY(-40%) translateX(100vw); opacity: 1}
    100% {transform: rotateY(180deg) translateY(-40%) translateX(100vw); opacity: 0}
}
@keyframes motionSizeAndFlip18 {
    0% {transform: rotateY(0deg) translateY(-40%) translateX(50vw); opacity: 0}
    1% {transform: rotateY(0deg) translateY(-40%) translateX(50vw); opacity: 1}
    99% {transform: rotateY(0deg) translateY(-40%) translateX(-100vw); opacity: 1}
    100% {transform: rotateY(0deg) translateY(-40%) translateX(-100vw); opacity: 0}
}
@keyframes motionSizeAndFlip19 {
    0% {transform: rotateY(180deg) translateY(-45%) translateX(-50vw); opacity: 0}
    1% {transform: rotateY(180deg) translateY(-45%) translateX(-50vw); opacity: 1}
    99% {transform: rotateY(180deg) translateY(-45%) translateX(100vw); opacity: 1}
    100% {transform: rotateY(180deg) translateY(-45%) translateX(100vw); opacity: 0}
}
@keyframes motionSizeAndFlip20 {
    0% {transform: rotateY(0deg) translateY(-45%) translateX(50vw); opacity: 0}
    1% {transform: rotateY(0deg) translateY(-45%) translateX(50vw); opacity: 1}
    99% {transform: rotateY(0deg) translateY(-45%) translateX(-100vw); opacity: 1}
    100% {transform: rotateY(0deg) translateY(-45%) translateX(-100vw); opacity: 0}
}
@keyframes motionSizeAndFlip21 {
    0% {transform: rotateY(180deg) translateY(-50%) translateX(-50vw); opacity: 0}
    1% {transform: rotateY(180deg) translateY(-50%) translateX(-50vw); opacity: 1}
    99% {transform: rotateY(180deg) translateY(-50%) translateX(100vw); opacity: 1}
    100% {transform: rotateY(180deg) translateY(-50%) translateX(100vw); opacity: 0}
}
@keyframes motionSizeAndFlip22 {
    0% {transform: rotateY(0deg) translateY(-50%) translateX(50vw); opacity: 0}
    1% {transform: rotateY(0deg) translateY(-50%) translateX(50vw); opacity: 1}
    99% {transform: rotateY(0deg) translateY(-50%) translateX(-100vw); opacity: 1}
    100% {transform: rotateY(0deg) translateY(-50%) translateX(-100vw); opacity: 0}
}
@keyframes motionSizeAndFlip23 {
    0% {transform: rotateY(180deg) translateY(-55%) translateX(-50vw); opacity: 0}
    1% {transform: rotateY(180deg) translateY(-55%) translateX(-50vw); opacity: 1}
    99% {transform: rotateY(180deg) translateY(-55%) translateX(100vw); opacity: 1}
    100% {transform: rotateY(180deg) translateY(-55%) translateX(100vw); opacity: 0}
}
@keyframes motionSizeAndFlip24 {
    0% {transform: rotateY(0deg) translateY(-55%) translateX(50vw); opacity: 0}
    1% {transform: rotateY(0deg) translateY(-55%) translateX(50vw); opacity: 1}
    99% {transform: rotateY(0deg) translateY(-55%) translateX(-100vw); opacity: 1}
    100% {transform: rotateY(0deg) translateY(-55%) translateX(-100vw); opacity: 0}
}
@keyframes motionSizeAndFlip25 {
    0% {transform: rotateY(180deg) translateY(-60%) translateX(-50vw); opacity: 0}
    1% {transform: rotateY(180deg) translateY(-60%) translateX(-50vw); opacity: 1}
    99% {transform: rotateY(180deg) translateY(-60%) translateX(100vw); opacity: 1}
    100% {transform: rotateY(180deg) translateY(-60%) translateX(100vw); opacity: 0}
}
@keyframes motionSizeAndFlip26 {
    0% {transform: rotateY(0deg) translateY(-60%) translateX(50vw); opacity: 0}
    1% {transform: rotateY(0deg) translateY(-60%) translateX(50vw); opacity: 1}
    99% {transform: rotateY(0deg) translateY(-60%) translateX(-100vw); opacity: 1}
    100% {transform: rotateY(0deg) translateY(-60%) translateX(-100vw); opacity: 0}
}
@keyframes motionSizeAndFlip27 {
    0% {transform: rotateY(180deg) translateY(-65%) translateX(-50vw); opacity: 0}
    1% {transform: rotateY(180deg) translateY(-65%) translateX(-50vw); opacity: 1}
    99% {transform: rotateY(180deg) translateY(-65%) translateX(100vw); opacity: 1}
    100% {transform: rotateY(180deg) translateY(-65%) translateX(100vw); opacity: 0}
}
@keyframes motionSizeAndFlip28 {
    0% {transform: rotateY(0deg) translateY(-65%) translateX(50vw); opacity: 0}
    1% {transform: rotateY(0deg) translateY(-65%) translateX(50vw); opacity: 1}
    99% {transform: rotateY(0deg) translateY(-65%) translateX(-100vw); opacity: 1}
    100% {transform: rotateY(0deg) translateY(-65%) translateX(-100vw); opacity: 0}
}
@keyframes motionSizeAndFlip29 {
    0% {transform: rotateY(180deg) translateY(-70%) translateX(-50vw); opacity: 0}
    1% {transform: rotateY(180deg) translateY(-70%) translateX(-50vw); opacity: 1}
    99% {transform: rotateY(180deg) translateY(-70%) translateX(100vw); opacity: 1}
    100% {transform: rotateY(180deg) translateY(-70%) translateX(100vw); opacity: 0}
}
@keyframes motionSizeAndFlip30 {
    0% {transform: rotateY(0deg) translateY(-70%) translateX(50vw); opacity: 0}
    1% {transform: rotateY(0deg) translateY(-70%) translateX(50vw); opacity: 1}
    99% {transform: rotateY(0deg) translateY(-70%) translateX(-100vw); opacity: 1}
    100% {transform: rotateY(0deg) translateY(-70%) translateX(-100vw); opacity: 0}
}
@keyframes motionSizeAndFlip31 {
    0% {transform: rotateY(180deg) translateY(-75%) translateX(-50vw); opacity: 0}
    1% {transform: rotateY(180deg) translateY(-75%) translateX(-50vw); opacity: 1}
    99% {transform: rotateY(180deg) translateY(-75%) translateX(100vw); opacity: 1}
    100% {transform: rotateY(180deg) translateY(-75%) translateX(100vw); opacity: 0}
}
@keyframes motionSizeAndFlip32 {
    0% {transform: rotateY(0deg) translateY(-75%) translateX(50vw); opacity: 0}
    1% {transform: rotateY(0deg) translateY(-75%) translateX(50vw); opacity: 1}
    99% {transform: rotateY(0deg) translateY(-75%) translateX(-100vw); opacity: 1}
    100% {transform: rotateY(0deg) translateY(-75%) translateX(-100vw); opacity: 0}
}



@keyframes spin-all {
	50%, 100% { transform: rotate(720deg); }
}
@keyframes spin-cube {
	0%, 50% {
	border-radius: 100%;
	transform: rotate(39deg) rotateX(0deg) rotateY(0deg);
	left: 20vmin;
	top: 10vmin;
	width: 10vmin;
	height: 10vmin;
	}
	50%, 100% {
	border-radius: 2vmin;
	transform: rotate(48deg) rotateX(22.5deg) rotateY(-22.5deg);
	left: 14.5vmin;
	top: 5vmin;
	width: 20vmin;
	height: 20vmin;
	}
}
@keyframes spin-cube-before {
	0%, 50% {
	border-radius: 100%;
	transform: rotateY(-180deg) rotateX(0deg);
	left: 11vmin;
	top: 9vmin;
	width: 100%;
	height: 100%;
	}
	50%, 100% {
	border-radius: 2vmin;
	transform: rotateY(-90deg);
	left: 4vmin;
	top: 2.5vmin;
	width: calc(100% - 2vmin);
	height: calc(100% - 2vmin);
	}
}
@keyframes spin-cube-after {
	0%, 50% {
	border-radius: 100%;
	transform: rotateY(0deg) rotateX(0deg);
	left: 5vmin;
	top: 24vmin;
	width: 100%;
	height: 100%;
	}
	50%, 100% {
	border-radius: 2vmin;
	transform: rotateX(-90deg);
	left: 11.25vmin;
	top: 13vmin;
	width: calc(100% - 5vmin);
	height: calc(100% - 5vmin);
	}
}
